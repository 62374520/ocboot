- name: count nodes
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  shell: |
    if [ -f / ]; then
      /usr/bin/cp -fv /opt/yunion/upgrade/ocadm /opt/yunion/bin
    fi
    count=$(kubectl get nodes|grep -v NAME | grep -w master |wc -l)
    [[ "$count" -ge 3 ]]
  retries: 30
  delay: 10
  register: result
  until: result.rc == 0

- name: nodes ready
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  shell: |
    count=$(kubectl get nodes|grep -v NAME | grep -w master | grep -w Ready |wc -l)
    [[ "$count" -ge 3 ]]
  retries: 30
  delay: 10
  register: result
  until: result.rc == 0

- name: Check onecloud cluster exists
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  shell: "kubectl get onecloudcluster -n onecloud | grep default | wc -l"
  register: OC_CLUSTER_COUNT


- name: longhorn join
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  shell: |
    set -x
    cmd="/opt/yunion/bin/ocadm longhorn enable --longhorn-data-path /opt/longhorn "
    for node in $(kubectl get nodes|grep -v NAME | grep -w Ready |awk '{print $1}' )
    do
      cmd="$cmd --node $node"
    done
    cmd="$cmd \
        --longhorn-over-provisioning-percentage {{ longhorn_over_provisioning_percentage }} \
        --image-repository {{ longhorn_image_repository }}"
    echo "cmd: $cmd "
    $cmd
  when: OC_CLUSTER_COUNT.stdout|int == 0
  retries: 3
  delay: 10
  register: result
  until: result.rc == 0

- name: Create Cluster with longhorn, wait for a few minutes...
  shell: "/opt/yunion/bin/ocadm cluster create --use-ee --use-longhorn --wait"
  retries: 6
  delay: 10
  register: result
  until: result.rc == 0
  when: OC_CLUSTER_COUNT.stdout|int == 0

- name: Export KUBECONFIG in master's ~/.bashrc
  lineinfile:
    dest: ~/.bashrc
    line: "export KUBECONFIG=/etc/kubernetes/admin.conf"
    state: present
    create: yes
    regexp: '^export KUBECONFIG=.*'
  when: shell is undefined or shell == 'bash'

- name: Source kubectl bash completion in master's ~/.bashrc
  lineinfile:
    dest: ~/.bashrc
    line: "source <(kubectl completion bash)"
    state: present
    create: yes
    regexp: '.*kubectl completion bash.*'
  when: shell is undefined or shell == 'bash'

- name: Wait onecloud CRD created
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  shell: 'kubectl get crd | grep onecloudcluster'
  retries: 30
  delay: 10
  register: result
  until: result.rc == 0

- name: Check if admin network adm0 exists
  shell: |
    eval $(/opt/yunion/bin/ocadm cluster rcadmin)
    /opt/yunion/bin/climc network-show adm0 > /dev/null 2>&1
  register: network_admin_exist
  ignore_errors: yes
  changed_when: false
  failed_when: false

- name: "Get default gateway {{ default_gateway }} local ip address"
  shell: "ip route get 1 | head -n 1 | awk '{print $7}'"
  register: default_ip_ret

- name: set default ip var
  set_fact:
    default_ip: "{{ default_ip_ret.stdout }}"

- name: "Check if network contains {{ default_ip }}"
  shell: |
    eval $(/opt/yunion/bin/ocadm cluster rcadmin)
    /opt/yunion/bin/climc network-list --ip {{ default_ip }} | grep -v Total | wc -l
  register: network_count_ret
  ignore_errors: yes
  changed_when: false
  failed_when: false

- name: set admin network count
  set_fact:
    admin_network_count: "{{ network_count_ret.stdout }}"

- name: "Register adm0 network for {{ default_ip }}/{{ default_masklen }}, gateway {{ default_gateway }}"
  shell: |
    eval $(/opt/yunion/bin/ocadm cluster rcadmin)
    /opt/yunion/bin/climc network-create --gateway {{ default_gateway }} --server-type baremetal bcast0 adm0 {{ default_ip }} {{ default_ip }} {{ default_masklen }}
    /opt/yunion/bin/climc network-private adm0
  when:
  - network_admin_exist.rc != 0
  - admin_network_count|int == 0

- name: "post install scripts"
  shell: |
    find /opt/yunion/upgrade/post-install -name '*.sh' -type f| while read line
    do
      echo "processing $line ... "
      sh -c "$line" 2>&1 | tee -a /tmp/post-install.log
      echo "[DONE ]processing $line OK"
    done

- name: set host ip string
  set_fact:
    host_ip_string: "{{k8s_host_node_ips | join(' ') }}"
  when:
  - k8s_host_node_ips is defined
  - k8s_host_node_ips | length > 0

- name: join node as onecloud host agent
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  shell: |
    # ocadm node enable-host-agent --node node1 --node node2
    len="{{ k8s_host_node_ips | length }}"
    if [[ "$len" -eq 0 ]]; then
      echo "0 hosts to join. exit ... "
      exit 0
    fi
    cluster="$(kubectl get nodes -n onecloud -o wide|grep -vw NAME)"
    cmd="/opt/yunion/bin/ocadm node enable-host-agent"
    for ip in $(echo {{ host_ip_string }})
    do
      node="$(echo "$cluster" |grep " $ip " | awk '{print $1}')"
      if [[ -n "$node" ]]; then
        cmd="$cmd --node $node"
      else
        echo "[ERROR] node $ip is not found!"
      fi
    done
    echo "got command: [$cmd]"
    $cmd
  when:
  - k8s_host_node_ips is defined
  - k8s_host_node_ips | length > 0
