- name: TCP Configuration
  include_role:
    name: tcp

- name: Include utils/controlplane tasks
  include_role:
    name: utils/controlplane

- name: Get cluster token
  shell: /opt/yunion/bin/ocadm token list | cut -d  ' ' -f1 | sed -n '2p'
  register: K8S_TOKEN

- name: load local images if exist; it might take a few minutes...
  shell: |
    offline_data_path={{ offline_data_path }}
    if [ ! -d $offline_data_path/images ]; then
      echo "no images path found under the offline data path. "
      exit 1
    fi
    count=$(find $offline_data_path/images -maxdepth 1 -type f -name '*tar.xz' |wc -l)
    if [ "$count" -eq 0 ]; then
      echo "no images to load. "
      exit 1
    fi
    if [ -x /usr/bin/parallel ]; then
      parallel --will-cite docker load -i ::: $offline_data_path/images/*.tar.xz
    else
      for i in $offline_data_path/images/*.tar.xz
      do
        docker load -i $i
      done
    fi
  ignore_errors: yes
  args:
    executable: /bin/bash
  when:
    - online_status == "offline"
    - offline_data_path is defined
    - offline_data_path | length > 0

- name: Pull ocadm images on node
  command: "/opt/yunion/bin/ocadm config images pull --image-repository {{ image_repository | default('registry.cn-beijing.aliyuncs.com/yunion')}} --onecloud-version {{ onecloud_version | default('latest') }} --operator-version {{ onecloud_version | default('latest') }}"
  register: command_result
  changed_when: '"Image is up to date" not in command_result.stdout or "Already exists" not in command_result.stdout'
  when:
  - K8S_TOKEN.stdout|length == 0
  - online_status == "online"

- name: Check node is init
  shell: test -f /etc/kubernetes/kubelet.conf
  register: kubelet_result
  ignore_errors: yes
  changed_when: false
  failed_when: false

- block:
  - name: Construct controlplane endpoint
    set_fact:
      controlplane_endpoint: "{{k8s_controlplane_host}}:{{ k8s_controlplane_port | default(6443) }}"

  - name: Construct init args
    set_fact:
      init_args: "init --control-plane-endpoint {{ controlplane_endpoint }} --mysql-host {{ db_host }} --mysql-user {{ db_user }} --mysql-password {{ db_password}}"

  - name: Construct init args with db_port config
    set_fact:
      init_args: "{{ init_args }} --mysql-port {{ db_port }}"
    when:
      db_port is defined

  - name: Construct image repository
    set_fact:
      init_args: "{{ init_args }} --image-repository {{ image_repository }}"
    when:
      image_repository is defined

  - name: Construct init args apiserver_advertise_address
    set_fact:
      init_args: "{{ init_args }} --apiserver-advertise-address {{ apiserver_advertise_address }} "
    when:
      apiserver_advertise_address is defined

  - name: Construct init args node_ip
    set_fact:
      init_args: "{{ init_args }} --node-ip {{ node_ip }}"
    when:
      node_ip is defined

  - name: Construct init args host_networks
    set_fact:
      init_args: "{{ init_args }} --host-networks {{ host_networks }} "
    when:
      host_networks is defined

  - name: Construct onecloud version
    set_fact:
      init_args: "{{ init_args }} --onecloud-version {{ onecloud_version }} --operator-version {{ onecloud_version }}"
    when:
      onecloud_version is defined

  - name: Construct pod-network-cidr
    set_fact:
      init_args: "{{ init_args }} --pod-network-cidr {{ pod_network_cidr }}"
    when:
      pod_network_cidr is defined

  - name: Construct service-cidr
    set_fact:
      init_args: "{{ init_args }} --service-cidr {{ service_cidr }}"
    when:
      service_cidr is defined

  - name: Construct service-dns-domain
    set_fact:
      init_args: "{{ init_args }} --service-dns-domain {{ service_dns_domain }}"
    when:
      service_dns_domain is defined

  - name: Construct onecloud version
    set_fact:
      init_args: "{{ init_args }} --addon-calico-ip-autodetection-method {{ ip_autodetection_method }}"
    when:
      ip_autodetection_method is defined

  - name: Init ha ip
    set_fact:
      init_args: "{{ init_args }} --high-availability-vip {{ high_availability_vip }}"
    when:
      high_availability_vip is defined

  - name: Init keepalived version tag
    set_fact:
      init_args: "{{ init_args }} --keepalived-version-tag {{ keepalived_version_tag }}"
    when:
      keepalived_version_tag is defined

  - name: Init node as onecloud host agent
    set_fact:
      init_args: "{{ init_args }} --enable-host-agent"
    when:
    - k8s_node_as_oc_host|default(false)|bool == true

- name: Use ocadm init first master node
  command: "/opt/yunion/bin/ocadm {{ init_args }}"
  when: kubelet_result.rc != 0

- name: "Wait 500 seconds for primary master to response: {{ controlplane_endpoint }}"
  wait_for:
    host: "{{ k8s_controlplane_host }}"
    port: "{{ k8s_controlplane_port | default(6443)}}"
    delay: 1
    timeout: 500
  run_once: yes

- name: Export KUBECONFIG in master's ~/.bashrc
  lineinfile:
    dest: ~/.bashrc
    line: "export KUBECONFIG=/etc/kubernetes/admin.conf"
    state: present
    create: yes
    regexp: '^export KUBECONFIG=.*'
  when:
  - shell is undefined or shell == 'bash'

- name: Source kubectl bash completion in master's ~/.bashrc
  lineinfile:
    dest: ~/.bashrc
    line: "source <(kubectl completion bash)"
    state: present
    create: yes
    regexp: '.*kubectl completion bash.*'
  when:
  - shell is undefined or shell == 'bash'

- name: Include utils/k8s/kubelet/extra-args tasks
  include_role:
    name: utils/k8s/kubelet/extra-args
